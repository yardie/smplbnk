class Booking < ActiveRecord::Base

  has_many :accomms
  has_many :accomm_types, :through => :accomms

  def self.availability(date)
  
    # TODO implement check on status - only include confirmed? include penciled? - or rather store bookings in a hash of different statuses - only refreshed when a bookings are added, changed, etc...? Then calculate availability from elements - thus more maleable
  
    # TODO can this be changed to find_all_by_arrival_date_and_departure_date(...) <- what goes in here
    todaysBookings = find(:all, :conditions => ['arrival_date <= ? and departure_date > ?', date, date])

    # for each Accommodation Type set its availability to its total in a hash, then subtract the relevant Accommodation Type quantity using todaysBookings

    # TODO tried @totalAccTypes ||= AccommType.getTotals but accommAvail = @totalAccTypes is associated by reference, not copy values
    accommAvail = {}
    accommAvail = AccommType.getTotals


    todaysBookings.each do |tBook|
      tBook.accomms.find(:all).each do |tBAccs|
        #TODO if this accommodation type contains a number of other accommodation types (bunkrooms contain a number of bunks), then subtract that quantity from that accommodation type - if it is in tBAccs then it has been booked!
        #TODO if this accommodation type is contained by others, work out if they are still available (bunkrooms from bunks)
        accommAvail[tBAccs.accomm_type_id] -= tBAccs.accomm_quantity
      end
    end
   
   accommAvail
  end
  
  def availRange(fromDate,toDate)
    ranged = {}
    fromDate.upto(toDate) do |selDate|
      ranged[selDate] = Booking.availability(selDate)
    end
    ranged
  end

end
